module halfadder(
    input A,
    input B,
    output S,
    output C
    );
	 
	xor (S,A,B);
	and (C,A,B);

endmodule


FULLADDER:
module Fulladder(
    input A,
    input B,
    input C,
    output S,
    output Carry
    );
	 
	 wire xor_a_b, and_a_b, and_x_c;
	 
	 xor(xor_a_b,A,B);
	 and(and_x_c, xor_a_b, C);
	 and(and_a_b,A,B);
	 
	 xor #2 final_xor(S,xor_a_b, C);
	 or #2 final_or(Carry, and_x_c, and_a_b);
	 
	 


endmodule




module ripplecarryadder(
    input [3:0] a,
    input [3:0] b,
	 output[4:0] s		
    );
	 
	 wire c0,c1,c2;
	 Fulladder fa1(a[0],b[0], 1'b0,s[0],c0);
	 Fulladder fa2(a[1],b[1], c0,s[1],c1);
	 Fulladder fa3(a[2],b[2], c1,s[2],c2);
	 Fulladder fa4(a[3],b[3], c2,s[3],s[4]);
	 

endmodule



module CarryLookAheadAdder(
	input[3:0] a,
	input[3:0]b,
	input cin,
	output [3:0] sum,
	output cout
    );
	 
	wire p0,p1,p2,p3,g0,g1,g2,g3,c1,c2,c3,c4;
	assign #2 p0=(a[0]^b[0]),
			 p1=(a[1]^b[1]),
			 p2=(a[2]^b[2]),
			 p3=(a[3]^b[3]);
	assign #2 g0=(a[0]&b[0]),
			 g1=(a[1]&b[1]),
			 g2=(a[2]&b[2]),
			 g3=(a[3]&b[3]);
	assign #1 c0=cin,
			 c1=g0|(p0&cin),
			 c2=g1|(p1&g0)|(p1&p0&cin),
			 c3=g2|(p2&g1)|(p2&p1&g0)|(p1&p1&p0&cin),
			 c4=g3|(p3&g2)|(p3&p2&g1)|(p3&p2&p1&g0)|(p3&p2&p1&p0&cin);
	assign #1 sum[0]=p0^c0,
			 sum[1]=p1^c1,
			 sum[2]=p2^c2,
			 sum[3]=p3^c3;
	assign cout=c4;
			 
endmodule




module mux_4to1(
    input [3:0] a,
    input [3:0] b,
    input [3:0] c,
    input [3:0] d,
    input [1:0] sel,
    output [3:0] out
    );

	assign out = sel[1] ? (sel[0] ? d : c) : (sel[0] ? b : a); 
	
endmodule




module mux_4to1another(
i,s,out
    );
	 
	 input[1:0] s;
	 input[3:0] i;
	 output out;
	 
	 reg out;
	 wire[1:0] s;
	 wire [3:0] i;
	 
	 always @(s or i)
	 begin
		out= (~s[0] & ~s[1] & i[0]) |
				(s[0] & ~s[1] & i[1]) |
				(~s[0] & s[1] & i[2]) |
				(s[0] & s[1] & i[3]);
	 
	
	
	end

endmodule






module alu_4bit(
       input [3:0] A,B,
input Cin,
       input [2:0] Sel,
       output [3:0] Out,
       output Cout
    );
    reg [3:0] Res;
reg rCout;
assign {Out,Cout}={Res,rCout};
    always @(*)
    begin
        case(Sel)
        3'b000:
           {rCout,Res}= A+B + Cin ;
        3'b001:
           {rCout,Res}= A - B - Cin ;
        3'b010:
           Res = A|B;
        3'b011:
           Res = A & B;
        3'b100:
           Res = {A[2:0],1'b0};
        3'b101:
           Res = {1'b0,A[3:1]};
        3'b110:
           Res= {A[2:0],A[3]};
        3'b111:
          Res= {A[0],A[3:1]};
        default: Res = 4'b0000 ;
        endcase
    end

endmodule








module register_3bit(
    input d0,
    input clk,
    output reg q0,
    output reg q1,
    output reg q2
    );
	 
	 always @(posedge clk)
	 begin
	 q0<=d0;
	 q1<=q0;
	 q2<=q1;
	 end
endmodule









module register_4bit(
input [3:0]d,
input clk,
output reg[3:0]q,
input load,
input clear
    );

always@(posedge clk)
begin

if(clear) q=4'b0000;
else
begin
if(load) q=d;
end
end


endmodule





COUNTER:
module lab5_assignment1(
	input [3:0] d,
	input clk,
	input INCR,
	input LOAD,
	input CLEAR,
   output reg [3:0] q,
	output reg carry
   );

always @(posedge clk)
begin
if(CLEAR == 1'b1)
begin
q = 4'b0;
end
else if(LOAD == 1'b1)
begin
q = d;
end
else if(INCR == 1'b1)
begin
q = q+1;
end
end
endmodule






FOUR BIT COUNTER:
module lab5_assignment2(
	input [7:0] inp,
	input incr,
	input clk,
	input load,
	input clear,
	output reg [7:0] out
    );
	 
	wire s,carry;
	
	lab5_assignment1 c1(inp[3:0],load,clear,clk,incr, out[3:0], carry);
	lab5_assignment1 c2(inp[7:4],load,clear,clk,carry,out[7:4],s);
	
endmodule




module Decoder(a,b,c,d0,d1,d2,d3,d4,d5,d6,d7);
	input a,b,c;
	output d0,d1,d2,d3,d4,d5,d6,d7;
	assign d0=(~a&~b&~c),
			 d1=(~a&~b&c),
			 d2=(~a&b&~c),
			 d3=(~a&b&c),
			 d4=(a&~b&~c),
			 d5=(a&~b&c),
			 d6=(a&b&~c),
			 d7=(a&b&c);
endmodule





module Encoder(d0,d1,d2,d3,d4,d5,d6,d7,a,b,c);
	input d0,d1,d2,d3,d4,d5,d6,d7;
	output a,b,c;
	or(a,d4,d5,d6,d7);
	or(b,d2,d3,d6,d7);
	or(c,d1,d3,d5,d7);
endmodule




T FLIPFLOP:
module tff(t,clk,rst, q,qb);
	input t,clk,rst;
	output q,qb;
	reg q,qb;
	reg temp=0;

	always@(posedge clk,posedge rst)
	begin
		if (rst==0) 
		begin
			if(t==1)
			begin
			temp=~ temp;
			end
			else
			temp=temp;
		end
	q=temp;qb=~temp;
	end

end module


D FLIPFLOP:

module dff(d,clk,rst,q,qb);
input d,clk,rst;
output q,qb;
reg q,qb;
reg temp=0;

always@(posedge clk,posedge rst)
begin
if (rst==0)
temp=d;
else
temp=temp;
q=temp;
qb=~ temp ;
end

end module



SR FLIP FLOP:

module srff(s,r,clk,rst, q,qb);
input s,r,clk,rst;
output q,qb;
reg q,qb;
reg [1:0]sr;
always@(posedge clk,posedge rst)
begin
sr={s,r};
if(rst==0)
begin
case (sr)
2'd1:q=1'b0;
2'd2:q=1'b1;
2'd3:q=1'b1;
default: begin end
endcase
end
else
begin
q=1'b0;
end

qb=~q;
end

end module






JK FLIP FLOP:

module jkff(j,k,clk,rst, q,qb);
input j,k,clk,rst;
output q,qb;
reg q,qb;
reg [1:0]jk;
always@(posedge clk,posedge rst)
begin
jk={j,k};
if(rst==0)
begin
case (jk)
2'd1:q=1'b0;
2'd2:q=1'b1;
2'd3:q=~q;
default: begin end
endcase
end
else

q=1'b0;

qb=~q;

end
end module


BCD ADDER
---------

module bcd_adder(
 input [3:0] a,b;
    input carry_in;
    output [3:0] sum;
    output carry;
    reg [4:0] sum_temp;
    reg [3:0] sum;
    reg carry;  
);

always @(a,b,carry_in)
    begin
        sum_temp = a+b+carry_in; //add all the inputs
        if(sum_temp > 9)    begin
            sum_temp = sum_temp+6; //add 6, if result is more than 9.
            carry = 1;  //set the carry output
            sum = sum_temp[3:0];    end
        else    begin
            carry = 0;
            sum = sum_temp[3:0];
        end
    end     

endmodule

(Add this in bcd testbench)
initial begin
        a = 0;  b = 0;  carry_in = 0;   #100;
        a = 6;  b = 9;  carry_in = 0;   #100;
        a = 3;  b = 3;  carry_in = 1;   #100;
        a = 4;  b = 5;  carry_in = 0;   #100;
        a = 8;  b = 2;  carry_in = 0;   #100;
        a = 9;  b = 9;  carry_in = 1;   #100;
    end


PRIORITY ENCODER:
module pr_en ( input [7:0] a,
               input [7:0] b,
               input [7:0] c,
               input [7:0] d,
               input [1:0] sel,
               output reg [7:0] out);
 
   always @ (a or b or c or d or sel) begin
      if (sel == 2'b00)
         out <= a;
      else if (sel == 2'b01) 
         out <= b;
      else if (sel == 2'b10)
         out <= c;
      else 
         out <= d;
   end
endmodule

(add this in testbench)
module tb_4to1_mux;
   reg [7:0] a;
   reg [7:0] b;
   reg [7:0] c;
   reg [7:0] d;
   wire [7:0] out;
   reg [1:0] sel;
   integer i;
 
   pr_en    pr_en0 (   .a (a),
                           .b (b),
                           .c (c),
                           .d (d),
                           .sel (sel),
                           .out (out));
 
   initial begin
      sel <= 0;
      a <= $random;
      b <= $random;
      c <= $random;
      d <= $random;
 
      for (i = 1; i < 4; i=i+1) begin
         #5 sel <= i;
      end
 
      #5 $finish;
   end
endmodule

RING COUNTER:
module ring_count(q,clk,clr);
  input clk,clr;
  output [3:0]q;
  reg [3:0]q;
  always @(posedge clk)
       if(clr==1)
            q<=4′b1000;
        else
            begin
                q[3]<=q[0];
                q[2]<=q[3];
                q[1]<=q[2];
                q[0]<=q[1];
            end
endmodule

(testbench)
`timescale 1ns/1ps
module ring_count_test();
    reg clk_tb,clr_tb;
    wire [3:0]q_tb;
    ring_count dut1(q_tb,clk_tb,clr_tb);
    initial 
        begin
        $display(“time,\t clk_tb,\t clr_tb,\t q_tb”);
        $monitor(“%g,\t %b,\t %b,\t %b”,$time,clk_tb,clr_tb,q_tb);
        clr_tb=1′b0;
        #50 clr_tb=1′b1;
        #100 clr_tb=1′b0;
        end
        always 
            begin
            #50 clk_tb=1′b1;
            #50 clk_tb=1′b0;
            end
endmodule
